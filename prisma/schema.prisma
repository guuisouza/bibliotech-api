generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @db.VarChar(90)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)
  Book      Book[]

  @@map("authors")
}

model Book {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  title     String   @db.VarChar(250)
  authorId  Int      @db.UnsignedInt
  available Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)

  author Author      @relation(fields: [authorId], references: [id], onDelete: Restrict)
  @@map("books")
  Loan Loan[]
}

model Student {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @db.VarChar(90)
  email     String   @db.VarChar(90) @unique()
  phone     String   @db.VarChar(15)
  academicRegistration  String @db.VarChar(13) @unique()
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)

  @@map("students")
  Loan Loan[]
}

model Loan {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  studentId Int      @db.UnsignedInt
  bookId    Int      @db.UnsignedInt
  loanDate  DateTime @default(now()) @db.Timestamp(0)
  dueDate   DateTime @db.Timestamp(0)
  isActive Boolean   @default(true)
  returnDate DateTime? @db.Timestamp(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)

  book Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  student Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  @@map("loans")
}